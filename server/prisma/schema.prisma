// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  email         String        @unique
  password      String
  username      String   
  img           String? 
  role          UserRole      @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  favorites     Favorite[]
  orders        Order[]
  notifications Notification[]
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?
  price       Float
  ingredients  String[]
  isAvailable Boolean   @default(true)
  img         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  favorites   Favorite[]
  orderItems  OrderItem[]
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId

  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  deliveryAddress String?
  paymentMethod   PaymentMethod @default(CASH)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  orderItems      OrderItem[]
}

model OrderItem {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String   @db.ObjectId
  productId   String   @db.ObjectId
  quantity    Int      @default(1)
  price       Float
  name        String
  
  order       Order    @relation(fields: [orderId], references: [id])
  product     Product? @relation(fields: [productId], references: [id])
}

enum UserRole {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
}

model Notification {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @db.ObjectId
  type        NotificationType
  title       String
  message     String
  isRead      Boolean           @default(false)
  relatedId   String?           @db.ObjectId
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  user        User              @relation(fields: [userId], references: [id])
}

enum NotificationType {
  ORDER_STATUS
  PROMOTION
  SYSTEM
  PAYMENT
}
